buildscript {
    ext {
        gradlePluginVersion = "3.0.1"
    }
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("com.bmuschko:gradle-docker-plugin:${gradlePluginVersion}")
    }
}

apply plugin: com.bmuschko.gradle.docker.DockerRemoteApiPlugin

docker {
    url = 'unix:///var/run/docker.sock'
    certPath = null
    if (System.getenv("DOCKER_HOST")) {
        url = System.getenv("DOCKER_HOST").replace("tcp", "https")
        if (System.getenv("DOCKER_CERT_PATH")) {
            certPath = new File(System.getenv("DOCKER_CERT_PATH").toString())
        }
    }
    registryCredentials {
        url = 'https://index.docker.io/v1'
        username = "$System.env.DOCKER_USER"
        password = "$System.env.DOCKER_PASS"
        email = "$System.env.DOCKER_EMAIL"
    }
}

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.DockerTagImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

def dockerBuildDir = 'build/docker'

afterEvaluate { project ->

    task taskCopyFilesForDocker(type: Copy) {
      dependsOn "copyShellScript", "copyJar"
    }

    task copyJar(type: Copy) {
      from "build/libs/${project.name}-${project.version}.jar"
      into dockerBuildDir
      rename { "app.jar" }
    }

    task copyShellScript(type: Copy) {
      from project.file('docker-entrypoint.sh').getAbsolutePath()
      into dockerBuildDir
    }

    task createDockerfile(type: Dockerfile) {
      dependsOn taskCopyFilesForDocker
      destFile = project.file(dockerBuildDir + '/Dockerfile')
      from dockerBaseImage
      maintainer 'Karsten Ludwig Hauser'
      addFile 'app.jar', '/'
      runCommand '[ -e /sbin/apk ] && ( [ -e /bin/bash ] || apk add --update bash ) || ( [ -e /usr/bin/apt-get ] && ( apt-get update && apt-get dist-upgrade -y && apt-get install -y ca-certificates patch unzip && apt-get clean all && which unzip && which patch ) || ( echo "no \"apk\", no \"apt-get\", what are you running, Gentoo?" >&2 && exit 1 ) )'
      runCommand '( which curl || apk add --update curl )'
      if (project.hasProperty('dockerExposePort'))
        exposePort project.dockerExposePort
      if (project.file('docker-entrypoint.sh').exists()) {
        copyFile './docker-entrypoint.sh', '/'
        runCommand 'chmod +x docker-entrypoint.sh'
        entryPoint '/docker-entrypoint.sh'
      }
      else
        entryPoint 'java', '-jar', '-Djava.security.egd=file:/dev/./urandom', '-Dspring.profiles.active=docker', '/app.jar'
    }

    task buildDockerImage(type: DockerBuildImage) {
      dependsOn createDockerfile
      inputDir = createDockerfile.destFile.parentFile
      tag = project.imageName
    }

    task pushDockerImage(type: DockerPushImage) {
      dependsOn buildDockerImage
      imageName = project.imageName
    }

}

// START: docker-compose
import org.apache.tools.ant.taskdefs.condition.Os

task upDockerCompose (type: Exec) {
	//dependsOn buildDockerImage
	if (project.file('docker-compose.yml').exists()) {
		if (Os.isFamily(Os.FAMILY_WINDOWS)) {
			commandLine "cmd", "/c", "docker-compose", "up", "-d"
		}
		else {
			commandLine "docker-compose", "up", "-d"
		}
	}
	else {
		commandLine "docker-compose", "ps"
	}
}

upDockerCompose.doLast {
	if (project.file('docker-compose.yml').exists()) {
		sleep(60 * 1000)
	}
}

task downDockerCompose (type: Exec) {
	//dependsOn buildDockerImage
	if (project.file('docker-compose.yml').exists()) {
		if (Os.isFamily(Os.FAMILY_WINDOWS)) {
			commandLine "cmd", "/c", "docker-compose", "down"
		}
		else {
			commandLine "docker-compose", "down"
		}
	}
	else {
		commandLine "docker-compose", "ps"
	}
}

test.dependsOn(upDockerCompose)
build.dependsOn(downDockerCompose)
// END: docker-compose